// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RecSysApi.Infrastructure.Context;

namespace RecSysApi.Infrastructure.Migrations
{
    [DbContext(typeof(RecSysApiContext))]
    [Migration("20220223154543_NewMigration")]
    partial class NewMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.Account", b =>
                {
                    b.Property<Guid>("AccountID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AccountID");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.Publisher", b =>
                {
                    b.Property<Guid>("PublisherID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PublisherID");

                    b.HasIndex("UserID");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.User", b =>
                {
                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.HasIndex("AccountID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Bundle", b =>
                {
                    b.Property<Guid>("BundleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BundleID");

                    b.HasIndex("AccountID");

                    b.ToTable("Bundles");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Course", b =>
                {
                    b.Property<Guid>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BundleID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PriceID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CourseID");

                    b.HasIndex("AccountID");

                    b.HasIndex("BundleID");

                    b.HasIndex("PriceID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Price", b =>
                {
                    b.Property<Guid>("PriceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PriceID");

                    b.ToTable("Prices");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Section", b =>
                {
                    b.Property<Guid>("SectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SectionID");

                    b.HasIndex("CourseID");

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.SearchProperties", b =>
                {
                    b.Property<Guid>("SearchPropertiesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Transcription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SearchPropertiesID");

                    b.ToTable("SearchProperties");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Video", b =>
                {
                    b.Property<Guid>("VideoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Author")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("CanRead")
                        .HasColumnType("bit");

                    b.Property<bool>("CanWrite")
                        .HasColumnType("bit");

                    b.Property<string>("Catalog")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<bool>("HiddenInSearches")
                        .HasColumnType("bit");

                    b.Property<bool>("HideSocial")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("MetadataVideoMetadataID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ProcessSlides")
                        .HasColumnType("bit");

                    b.Property<bool>("Published")
                        .HasColumnType("bit");

                    b.Property<string>("Repository")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("SearchPropertiesID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SectionID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SourceVideoSourceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Thumbnail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Transcription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Unprocessed")
                        .HasColumnType("bit");

                    b.HasKey("VideoID");

                    b.HasIndex("MetadataVideoMetadataID");

                    b.HasIndex("SearchPropertiesID");

                    b.HasIndex("SectionID");

                    b.HasIndex("SourceVideoSourceID");

                    b.ToTable("Videos");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.VideoBoxDescription", b =>
                {
                    b.Property<Guid>("VideoBoxDescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Mimetype")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Src")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VideoSourceID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("VideoBoxDescriptionID");

                    b.HasIndex("VideoSourceID");

                    b.ToTable("VideoBoxDescription");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.VideoMetadata", b =>
                {
                    b.Property<Guid>("VideoMetadataID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Keywords")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VideoMetadataID");

                    b.ToTable("VideoMetadata");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.VideoSlides", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Mimetype")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Thumb")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Time")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Url")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VideoID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VideoSlidesID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("VideoID");

                    b.ToTable("VideoSlides");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.VideoSource", b =>
                {
                    b.Property<Guid>("VideoSourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Poster")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Type")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("VideoSourceID");

                    b.ToTable("VideoSource");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.Admin", b =>
                {
                    b.HasBaseType("RecSysApi.Domain.Entities.Account.User");

                    b.Property<Guid>("AdminID")
                        .HasColumnType("uniqueidentifier");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.Publisher", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.Account.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.User", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.Account.Account", "Account")
                        .WithMany("Users")
                        .HasForeignKey("AccountID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Bundle", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.Account.Account", null)
                        .WithMany("Bundles")
                        .HasForeignKey("AccountID");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Course", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.Account.Account", null)
                        .WithMany("Courses")
                        .HasForeignKey("AccountID");

                    b.HasOne("RecSysApi.Domain.Entities.Products.Bundle", null)
                        .WithMany("Courses")
                        .HasForeignKey("BundleID");

                    b.HasOne("RecSysApi.Domain.Entities.Products.Price", "Price")
                        .WithMany()
                        .HasForeignKey("PriceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Price");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Section", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.Products.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Video", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.VideoMetadata", "Metadata")
                        .WithMany()
                        .HasForeignKey("MetadataVideoMetadataID");

                    b.HasOne("RecSysApi.Domain.Entities.SearchProperties", "Search")
                        .WithMany()
                        .HasForeignKey("SearchPropertiesID");

                    b.HasOne("RecSysApi.Domain.Entities.Products.Section", "Section")
                        .WithMany("Videos")
                        .HasForeignKey("SectionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RecSysApi.Domain.Entities.VideoSource", "Source")
                        .WithMany()
                        .HasForeignKey("SourceVideoSourceID");

                    b.Navigation("Metadata");

                    b.Navigation("Search");

                    b.Navigation("Section");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.VideoBoxDescription", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.VideoSource", null)
                        .WithMany("VideoBoxDescriptions")
                        .HasForeignKey("VideoSourceID");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.VideoSlides", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.Video", null)
                        .WithMany("Slides")
                        .HasForeignKey("VideoID");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.Admin", b =>
                {
                    b.HasOne("RecSysApi.Domain.Entities.Account.User", null)
                        .WithOne()
                        .HasForeignKey("RecSysApi.Domain.Entities.Account.Admin", "UserID")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Account.Account", b =>
                {
                    b.Navigation("Bundles");

                    b.Navigation("Courses");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Bundle", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Course", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Products.Section", b =>
                {
                    b.Navigation("Videos");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.Video", b =>
                {
                    b.Navigation("Slides");
                });

            modelBuilder.Entity("RecSysApi.Domain.Entities.VideoSource", b =>
                {
                    b.Navigation("VideoBoxDescriptions");
                });
#pragma warning restore 612, 618
        }
    }
}
